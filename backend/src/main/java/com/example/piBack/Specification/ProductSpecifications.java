package com.example.piBack.Specification;

import com.example.piBack.Model.Category;
import com.example.piBack.Model.City;
import com.example.piBack.Model.Product;
import com.example.piBack.Model.Reservation;
import org.springframework.data.jpa.domain.Specification;

import javax.persistence.criteria.*;
import java.time.LocalDate;

public class ProductSpecifications {

    //Products by category title
    public static Specification<Product> productsByCategoryTitle(String categoryTitle) {
        return (root, query, criteriaBuilder) -> {
            Join<Product, Category> categoryJoin = root.join("category");
            return criteriaBuilder.equal(categoryJoin.get("title"), categoryTitle);
        };
    }

    //Products by city state
    public static Specification<Product> productsByCityState(String cityState) {
        return (root, query, criteriaBuilder) -> {
            Join<Product, City> cityJoin = root.join("city");
            return criteriaBuilder.equal(cityJoin.get("state"), cityState);
        };
    }

    //Products by date range (checking if it has reservations)
    public static Specification<Product> productsByDate(LocalDate startDate, LocalDate endDate) {
        return (root, query, criteriaBuilder) -> {
            /* SQL generated by this specification:
                select
                product0_.id as id1_7_,
                        product0_.availability as availabi2_7_,
                product0_.id_category as id_categ5_7_,
                        product0_.id_city as id_city6_7_,
                product0_.description as descript3_7_,
                        product0_.id_policy as id_polic7_7_,
                product0_.title as title4_7_
                        from
                product product0_
                where
                product0_.id not in (
                        select
                        product1_.id
                        from
                        product product1_
                        inner join reservation reservatio2_ on
                        product1_.id = reservatio2_.id_product
                        where
                        reservatio2_.end_date >= ?startDate
                        and reservatio2_.start_date <= ?endDate)
            */

            Subquery<Long> productSubquery = query.subquery(Long.class);
            final Root<Product> productSubqueryRoot = productSubquery.from(Product.class);
            SetJoin<Product, Reservation> reservationJoin = productSubqueryRoot.joinSet("reservations");
            productSubquery.select(productSubqueryRoot.get("id"));
            productSubquery.where(
                    criteriaBuilder.and(
                            criteriaBuilder.greaterThanOrEqualTo(reservationJoin.get("endDate"), startDate), //:startDate <= r.end_date
                            criteriaBuilder.lessThanOrEqualTo(reservationJoin.get("startDate"), endDate)) //:endDate >= r.start_date
            );
            Predicate predicate = root.get("id").in(productSubquery);
            return criteriaBuilder.not(predicate);
        };
    }


}
